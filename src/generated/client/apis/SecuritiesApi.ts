/* tslint:disable */
/* eslint-disable */
/**
 * Taskusalkku API-spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Security,
    SecurityFromJSON,
    SecurityToJSON,
    SecurityHistoryValue,
    SecurityHistoryValueFromJSON,
    SecurityHistoryValueToJSON,
} from '../models';

export interface FindSecurityRequest {
    securityId: string;
}

export interface ListSecuritiesRequest {
    seriesId?: number;
    fundId?: string;
    firstResult?: number;
    maxResults?: number;
}

export interface ListSecurityHistoryValuesRequest {
    securityId: string;
    firstResult?: number;
    maxResults?: number;
    startDate?: Date;
    endDate?: Date;
}

/**
 * 
 */
export class SecuritiesApi extends runtime.BaseAPI {

    /**
     * Finds a security by id.
     * Find a security.
     */
    async findSecurityRaw(requestParameters: FindSecurityRequest): Promise<runtime.ApiResponse<Security>> {
        if (requestParameters.securityId === null || requestParameters.securityId === undefined) {
            throw new runtime.RequiredError('securityId','Required parameter requestParameters.securityId was null or undefined when calling findSecurity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/securities/{securityId}`.replace(`{${"securityId"}}`, encodeURIComponent(String(requestParameters.securityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityFromJSON(jsonValue));
    }

    /**
     * Finds a security by id.
     * Find a security.
     */
    async findSecurity(requestParameters: FindSecurityRequest): Promise<Security> {
        const response = await this.findSecurityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists securities.
     * List securities.
     */
    async listSecuritiesRaw(requestParameters: ListSecuritiesRequest): Promise<runtime.ApiResponse<Array<Security>>> {
        const queryParameters: any = {};

        if (requestParameters.seriesId !== undefined) {
            queryParameters['seriesId'] = requestParameters.seriesId;
        }

        if (requestParameters.fundId !== undefined) {
            queryParameters['fundId'] = requestParameters.fundId;
        }

        if (requestParameters.firstResult !== undefined) {
            queryParameters['firstResult'] = requestParameters.firstResult;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/securities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityFromJSON));
    }

    /**
     * Lists securities.
     * List securities.
     */
    async listSecurities(requestParameters: ListSecuritiesRequest): Promise<Array<Security>> {
        const response = await this.listSecuritiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists security history values
     * Lists security history values
     */
    async listSecurityHistoryValuesRaw(requestParameters: ListSecurityHistoryValuesRequest): Promise<runtime.ApiResponse<Array<SecurityHistoryValue>>> {
        if (requestParameters.securityId === null || requestParameters.securityId === undefined) {
            throw new runtime.RequiredError('securityId','Required parameter requestParameters.securityId was null or undefined when calling listSecurityHistoryValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.firstResult !== undefined) {
            queryParameters['firstResult'] = requestParameters.firstResult;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/securities/{securityId}/historyValues`.replace(`{${"securityId"}}`, encodeURIComponent(String(requestParameters.securityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityHistoryValueFromJSON));
    }

    /**
     * Lists security history values
     * Lists security history values
     */
    async listSecurityHistoryValues(requestParameters: ListSecurityHistoryValuesRequest): Promise<Array<SecurityHistoryValue>> {
        const response = await this.listSecurityHistoryValuesRaw(requestParameters);
        return await response.value();
    }

}
