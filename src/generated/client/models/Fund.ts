/* tslint:disable */
/* eslint-disable */
/**
 * Taskusalkku API-spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChangeData,
    ChangeDataFromJSON,
    ChangeDataFromJSONTyped,
    ChangeDataToJSON,
    FundGroup,
    FundGroupFromJSON,
    FundGroupFromJSONTyped,
    FundGroupToJSON,
    LocalizedValue,
    LocalizedValueFromJSON,
    LocalizedValueFromJSONTyped,
    LocalizedValueToJSON,
    SubscriptionBankAccount,
    SubscriptionBankAccountFromJSON,
    SubscriptionBankAccountFromJSONTyped,
    SubscriptionBankAccountToJSON,
} from './';

/**
 * Fund object
 * @export
 * @interface Fund
 */
export interface Fund {
    /**
     * Fund object id in UUID format
     * @type {string}
     * @memberof Fund
     */
    readonly id?: string;
    /**
     * 
     * @type {LocalizedValue}
     * @memberof Fund
     */
    name: LocalizedValue;
    /**
     * 
     * @type {LocalizedValue}
     * @memberof Fund
     */
    longName?: LocalizedValue;
    /**
     * 
     * @type {LocalizedValue}
     * @memberof Fund
     */
    shortName?: LocalizedValue;
    /**
     * Bank receiver name
     * @type {string}
     * @memberof Fund
     */
    bankReceiverName?: string;
    /**
     * 
     * @type {FundGroup}
     * @memberof Fund
     */
    group?: FundGroup;
    /**
     * Price date
     * @type {Date}
     * @memberof Fund
     */
    priceDate?: Date;
    /**
     * Share value A
     * @type {string}
     * @memberof Fund
     */
    aShareValue?: string;
    /**
     * Share value B
     * @type {string}
     * @memberof Fund
     */
    bShareValue?: string;
    /**
     * 
     * @type {ChangeData}
     * @memberof Fund
     */
    changeData?: ChangeData;
    /**
     * Profit projection
     * @type {string}
     * @memberof Fund
     */
    profitProjection?: string;
    /**
     * Profit projection date
     * @type {Date}
     * @memberof Fund
     */
    profitProjectionDate?: Date;
    /**
     * Fund color
     * @type {string}
     * @memberof Fund
     */
    color?: string;
    /**
     * Fund risk level
     * @type {number}
     * @memberof Fund
     */
    risk?: number;
    /**
     * 
     * @type {LocalizedValue}
     * @memberof Fund
     */
    kIID?: LocalizedValue;
    /**
     * Subscription bank accounts
     * @type {Array<SubscriptionBankAccount>}
     * @memberof Fund
     */
    subscriptionBankAccounts?: Array<SubscriptionBankAccount>;
    /**
     * subscribable
     * @type {boolean}
     * @memberof Fund
     */
    subscribable?: boolean;
}

export function FundFromJSON(json: any): Fund {
    return FundFromJSONTyped(json, false);
}

export function FundFromJSONTyped(json: any, ignoreDiscriminator: boolean): Fund {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': LocalizedValueFromJSON(json['name']),
        'longName': !exists(json, 'longName') ? undefined : LocalizedValueFromJSON(json['longName']),
        'shortName': !exists(json, 'shortName') ? undefined : LocalizedValueFromJSON(json['shortName']),
        'bankReceiverName': !exists(json, 'bankReceiverName') ? undefined : json['bankReceiverName'],
        'group': !exists(json, 'group') ? undefined : FundGroupFromJSON(json['group']),
        'priceDate': !exists(json, 'priceDate') ? undefined : (new Date(json['priceDate'])),
        'aShareValue': !exists(json, 'aShareValue') ? undefined : json['aShareValue'],
        'bShareValue': !exists(json, 'bShareValue') ? undefined : json['bShareValue'],
        'changeData': !exists(json, 'changeData') ? undefined : ChangeDataFromJSON(json['changeData']),
        'profitProjection': !exists(json, 'profitProjection') ? undefined : json['profitProjection'],
        'profitProjectionDate': !exists(json, 'profitProjectionDate') ? undefined : (new Date(json['profitProjectionDate'])),
        'color': !exists(json, 'color') ? undefined : json['color'],
        'risk': !exists(json, 'risk') ? undefined : json['risk'],
        'kIID': !exists(json, 'KIID') ? undefined : LocalizedValueFromJSON(json['KIID']),
        'subscriptionBankAccounts': !exists(json, 'subscriptionBankAccounts') ? undefined : ((json['subscriptionBankAccounts'] as Array<any>).map(SubscriptionBankAccountFromJSON)),
        'subscribable': !exists(json, 'subscribable') ? undefined : json['subscribable'],
    };
}

export function FundToJSON(value?: Fund | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': LocalizedValueToJSON(value.name),
        'longName': LocalizedValueToJSON(value.longName),
        'shortName': LocalizedValueToJSON(value.shortName),
        'bankReceiverName': value.bankReceiverName,
        'group': FundGroupToJSON(value.group),
        'priceDate': value.priceDate === undefined ? undefined : (value.priceDate.toISOString().substr(0,10)),
        'aShareValue': value.aShareValue,
        'bShareValue': value.bShareValue,
        'changeData': ChangeDataToJSON(value.changeData),
        'profitProjection': value.profitProjection,
        'profitProjectionDate': value.profitProjectionDate === undefined ? undefined : (value.profitProjectionDate.toISOString().substr(0,10)),
        'color': value.color,
        'risk': value.risk,
        'KIID': LocalizedValueToJSON(value.kIID),
        'subscriptionBankAccounts': value.subscriptionBankAccounts === undefined ? undefined : ((value.subscriptionBankAccounts as Array<any>).map(SubscriptionBankAccountToJSON)),
        'subscribable': value.subscribable,
    };
}


