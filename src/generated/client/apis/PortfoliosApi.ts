/* tslint:disable */
/* eslint-disable */
/**
 * Taskusalkku API-spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Portfolio,
    PortfolioFromJSON,
    PortfolioToJSON,
    PortfolioHistoryValue,
    PortfolioHistoryValueFromJSON,
    PortfolioHistoryValueToJSON,
    PortfolioSecurity,
    PortfolioSecurityFromJSON,
    PortfolioSecurityToJSON,
    PortfolioSummary,
    PortfolioSummaryFromJSON,
    PortfolioSummaryToJSON,
    PortfolioTransaction,
    PortfolioTransactionFromJSON,
    PortfolioTransactionToJSON,
    TransactionType,
    TransactionTypeFromJSON,
    TransactionTypeToJSON,
} from '../models';

export interface FindPortfolioRequest {
    portfolioId: string;
}

export interface FindPortfolioTransactionRequest {
    portfolioId: string;
    transactionId: string;
}

export interface GetPortfolioSummaryRequest {
    portfolioId: string;
    startDate: Date;
    endDate: Date;
}

export interface ListPortfolioHistoryValuesRequest {
    portfolioId: string;
    startDate: Date;
    endDate: Date;
}

export interface ListPortfolioSecuritiesRequest {
    portfolioId: string;
}

export interface ListPortfolioTransactionsRequest {
    portfolioId: string;
    startDate?: Date;
    endDate?: Date;
    transactionType?: TransactionType;
}

export interface ListPortfoliosRequest {
    companyId?: string;
}

/**
 * 
 */
export class PortfoliosApi extends runtime.BaseAPI {

    /**
     * Finds a portfolio by id.
     * Find a portfolio.
     */
    async findPortfolioRaw(requestParameters: FindPortfolioRequest): Promise<runtime.ApiResponse<Portfolio>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling findPortfolio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios/{portfolioId}`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioFromJSON(jsonValue));
    }

    /**
     * Finds a portfolio by id.
     * Find a portfolio.
     */
    async findPortfolio(requestParameters: FindPortfolioRequest): Promise<Portfolio> {
        const response = await this.findPortfolioRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns found portfolio transaction
     * Finds portfolio transaction
     */
    async findPortfolioTransactionRaw(requestParameters: FindPortfolioTransactionRequest): Promise<runtime.ApiResponse<PortfolioTransaction>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling findPortfolioTransaction.');
        }

        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling findPortfolioTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios/{portfolioId}/transactions/{transactionId}`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioTransactionFromJSON(jsonValue));
    }

    /**
     * Returns found portfolio transaction
     * Finds portfolio transaction
     */
    async findPortfolioTransaction(requestParameters: FindPortfolioTransactionRequest): Promise<PortfolioTransaction> {
        const response = await this.findPortfolioTransactionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns summary a portfolio history for given time range
     * Summary for portfolio summary
     */
    async getPortfolioSummaryRaw(requestParameters: GetPortfolioSummaryRequest): Promise<runtime.ApiResponse<PortfolioSummary>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling getPortfolioSummary.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getPortfolioSummary.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getPortfolioSummary.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios/{portfolioId}/summary`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioSummaryFromJSON(jsonValue));
    }

    /**
     * Returns summary a portfolio history for given time range
     * Summary for portfolio summary
     */
    async getPortfolioSummary(requestParameters: GetPortfolioSummaryRequest): Promise<PortfolioSummary> {
        const response = await this.getPortfolioSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists portfolio history values
     * List portfolio history values.
     */
    async listPortfolioHistoryValuesRaw(requestParameters: ListPortfolioHistoryValuesRequest): Promise<runtime.ApiResponse<Array<PortfolioHistoryValue>>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling listPortfolioHistoryValues.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling listPortfolioHistoryValues.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling listPortfolioHistoryValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios/{portfolioId}/historyValues`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortfolioHistoryValueFromJSON));
    }

    /**
     * Lists portfolio history values
     * List portfolio history values.
     */
    async listPortfolioHistoryValues(requestParameters: ListPortfolioHistoryValuesRequest): Promise<Array<PortfolioHistoryValue>> {
        const response = await this.listPortfolioHistoryValuesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of portfolio funds
     * Lists portfolio funds
     */
    async listPortfolioSecuritiesRaw(requestParameters: ListPortfolioSecuritiesRequest): Promise<runtime.ApiResponse<Array<PortfolioSecurity>>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling listPortfolioSecurities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios/{portfolioId}/securities`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortfolioSecurityFromJSON));
    }

    /**
     * Returns list of portfolio funds
     * Lists portfolio funds
     */
    async listPortfolioSecurities(requestParameters: ListPortfolioSecuritiesRequest): Promise<Array<PortfolioSecurity>> {
        const response = await this.listPortfolioSecuritiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of portfolio transactions
     * Lists portfolio transactions
     */
    async listPortfolioTransactionsRaw(requestParameters: ListPortfolioTransactionsRequest): Promise<runtime.ApiResponse<Array<PortfolioTransaction>>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling listPortfolioTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.transactionType !== undefined) {
            queryParameters['transactionType'] = requestParameters.transactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios/{portfolioId}/transactions`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortfolioTransactionFromJSON));
    }

    /**
     * Returns list of portfolio transactions
     * Lists portfolio transactions
     */
    async listPortfolioTransactions(requestParameters: ListPortfolioTransactionsRequest): Promise<Array<PortfolioTransaction>> {
        const response = await this.listPortfolioTransactionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists portfolios logged user has access to
     * List portfolios.
     */
    async listPortfoliosRaw(requestParameters: ListPortfoliosRequest): Promise<runtime.ApiResponse<Array<Portfolio>>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['companyId'] = requestParameters.companyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/portfolios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortfolioFromJSON));
    }

    /**
     * Lists portfolios logged user has access to
     * List portfolios.
     */
    async listPortfolios(requestParameters: ListPortfoliosRequest): Promise<Array<Portfolio>> {
        const response = await this.listPortfoliosRaw(requestParameters);
        return await response.value();
    }

}
